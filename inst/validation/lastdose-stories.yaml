LSD-S001:
  name: Add TAD and LDOS to data set
  description: "1. The user will pass in NMTRAN-formatted analysis data as a data
    frame. \r\n1. The analysis data frame will have the following required columns\r\n
    \   - `ID` or `id` - the user id number\r\n    - `TIME` or `time` - the time since
    first observation \r\n    - `AMT` or `amt` - the dose amount\r\n    - `EVID` or
    `evid` - the record event id; `evid` equal to 1 or 4\r\n      will be considered
    dosing records\r\n1. The analysis data frame will have the following optional
    columns\r\n    - `ADDL` or `addl` - additional doses to administer\r\n    - `II`
    or `ii` - the dosing interval\r\n1. All required and optional columns must be
    numeric; an error is generated\r\n   otherwise.\r\n1. The following columns must
    not contain missing values: ID, `evid`, `ii`, \r\n   `addl`; an error is generated
    if missing values are found.\r\n1. When `time` contains missing values, both `TAD`
    and `LDOS` will be set \r\n   to missing also.\r\n1. An error is generated when
    missing values are found in dosing records \r\n   (evid 1 or 4) but no error is
    generated when missing values found in \r\n   non-dosing records.\r\n1. The input
    data set must be sorted by time within individual; an error is \r\n   generated
    otherwise.\r\n1. By default, doses prior to the first dosing record will be calculated
    as \r\n   time before the first dose and be expressed as negative numbers.\r\n1.
    The user may choose to fill in `TAD` for records prior to the first dose\r\n   with
    a single user-specified fill value.\r\n1. The single use-specified fill value
    will be use to fill in all values for \r\n   `TAD` when no dosing records are
    found for a particular individual.\r\n1. The `lastdose()` function will append
    columns called `TAD` and `LDOS` to \r\n   the input data indicating the time after
    dose and last dose, respectively.\r\n1. The user can choose how to handle `TAD`
    when additional doses (via `ADDL`\r\n   happen at the same time as another record
    in the data set.  By default, \r\n   records at the same time are sorted ascending
    by dose amount so that \r\n   observation records happen prior to doses.  This
    makes the observation a \r\n   trough concentration. Alternatively, records can
    be sorted descending \r\n   by dose amount so that doses happen first.  This makes
    the observation \r\n   a peak. The sorting that is done has no bearing on records
    explicitly listed\r\n   in the input data."
  ProductRisk: low-risk
  tests:
  - LSD-TEST-001
  - LSD-TEST-003
  - LSD-TEST-004
  - LSD-TEST-005
  - LSD-TEST-006
  - LSD-TEST-007
  - LSD-TEST-009
  - LSD-TEST-010
  - LSD-TEST-011
  - LSD-TEST-012
  - LSD-TEST-013
  - LSD-TEST-015
LSD-S002:
  name: Return TAD and LDOS in different formats
  description: "1. The `lastdose()` function will append columns called `TAD` and
    `LDOS` to \r\n   the input data indicating the time after dose and last dose,
    respectively.\r\n1. The `lastdose_list()` function will do the same calculations
    as `lastdose()`, \r\n   however a list with elements `tad` and `ldos` will be
    returned.\r\n1. The `lastdose_df()` function will return a data frame with columns
    `tad`\r\n   and `ldos` with the same definitions as `lastdose_list()`."
  ProductRisk: low-risk
  tests:
  - LSD-TEST-007
  - LSD-TEST-008
LSD-S003:
  name: Choose how TAD and LDOS are filled
  description: "1. By default, doses prior to the first dosing record will be calculated
    as \r\n   time before the first dose and be expressed as negative numbers.\r\n1.
    The user may choose to fill in `TAD` for records prior to the first dose\r\n   with
    a single user-specified fill value.\r\n1. The user can choose how to handle `TAD`
    when additional doses (via `ADDL`\r\n   happen at the same time as another record
    in the data set.  By default, \r\n   records at the same time are sorted ascending
    by dose amount so that \r\n   observation records happen prior to doses.  This
    makes the observation a \r\n   trough concentration. Alternatively, records can
    be sorted descending \r\n   by dose amount so that doses happen first.  This makes
    the observation \r\n   a peak. The sorting that is done has no bearing on records
    explicitly listed\r\n   in the input data."
  ProductRisk: low-risk
  tests:
  - LSD-TEST-004
  - LSD-TEST-005
  - LSD-TEST-006
LSD-S004:
  name: Commented dose records are ignored when finding doses
  description: "- By default, comments are found when the data frame has a column
    called `C`and it is character; rows are commented if `C` is not NA and not equal
    to `.`\r\n  - A warning is issued when a column `C` is found and it is not character
    when using the default comment finding mechanism\r\n- The user can also pass a
    logical vector of rows to be considered as comments\r\n  - An error is generated
    if the length of the logical vector is not equal to the number of rows in the
    input data set\r\n  - If the comment vector is length 1 it will be recycled to
    the number of rows in the data frame\r\n- Commented rows are not considered when
    finding dosing records, including search for first dose\r\n- Commented rows will
    have `TAD` and `LDOS` filled in just like non-commented rows according to the
    last non-commented dosing record"
  ProductRisk: low-risk
  tests: LSD-TEST-016
LSD-S005:
  name: Take POSIXct object as the time indicator
  description: As a user, I want to specify data set TIME as a POSSIXct data
  ProductRisk: low-risk
  tests: LSD-TEST-021
LSD-S006:
  name: Undefined behavior when checking ADDL and II
  description: "- When either ADDL or II are not found in the data set, lastdose continues
    to check for missing values, resulting in undefined behavior\r\n\r\nSolution:
    \r\n\r\n- Drop `has_addl` checks\r\n- Pass in vectors of all zeros for ADDL and
    II when they are missing"
  ProductRisk: low-risk
  tests: LSD-TEST-017
LSD-S007:
  name: More flexible input for time and id
  description: As a user, I want to be able to use any column for TIME or ID.
  ProductRisk: low-risk
  tests:
  - LSD-TEST-018
  - LSD-TEST-021
LSD-S008:
  name: Refactor how comments are found
  description: As a user, I want lastdose to find logical columns when scanning for
    comment data
  ProductRisk: low-risk
  tests: LSD-TEST-022
LSD-S009:
  name: Time after first dose
  description: As a user, I want lastdose to calculate time since first dose for me
  ProductRisk: low-risk
  tests: LSD-TEST-002
LSD-S010:
  name: '[BUG] II column is not detected in the input data set'
  description: As a user, I want lastdose to properly detect `II` or `ii` and use
    it to calculate `TAD`.
  ProductRisk: low-risk
  tests:
  - LSD-TEST-023
  - LSD-TEST-024
LSD-S011:
  name: Guess names for TIME and ID
  description: As a user, I want lastdose to search my input data set for column names
    for ID and TIME
  ProductRisk: low-risk
  tests:
  - LSD-TEST-019
  - LSD-TEST-020
LSD-S012:
  name: Set options for default TIME and ID
  description: As a user, I want to be able to set defaults for `id_col` and `time_col`
    through an option
  ProductRisk: low-risk
  tests:
  - LSD-TEST-018
  - LSD-TEST-021
LSD-S013:
  name: Change default for include_tafd to FALSE
  description: As a user, I don't want lastdose to automatically write TAFD, but rather
    write time of first dose
  ProductRisk: low-risk
  tests: LSD-TEST-002
LSD-S014:
  name: Better Handling of NA in Time
  description: As a user, I want to be able to use `lastdose()` and friends with missing
    values in the TIME column
  ProductRisk: low-risk
  tests: LSD-TEST-014
